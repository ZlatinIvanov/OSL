shader TriangularSectors_Outside(
    vector MidPoint1 = vector(0.5, 0.5, 0.0),
    vector MidPoint2 = vector(0.6, 0.5, 0.0),
    vector MidPoint3 = vector(0.7, 0.5, 0.0),
    vector MidPoint4 = vector(0.75, 0.6, 0.0),
    vector MidPoint5 = vector(0.7, 0.7, 0.0),
    vector MidPoint6 = vector(0.6, 0.7, 0.0),
    vector MidPoint7 = vector(0.5, 0.7, 0.0),
    vector MidPoint8 = vector(0.4, 0.7, 0.0),
    vector MidPoint9 = vector(0.3, 0.6, 0.0),
    vector MidPoint10 = vector(0.25, 0.5, 0.0),
    vector MidPoint11 = vector(0.3, 0.4, 0.0),
    vector MidPoint12 = vector(0.4, 0.4, 0.0),
    vector MidPoint13 = vector(0.5, 0.4, 0.0),
    vector MidPoint14 = vector(0.6, 0.4, 0.0),
    vector MidPoint15 = vector(0.65, 0.35, 0.0),
    vector MidPoint16 = vector(0.55, 0.35, 0.0),
    
    vector OceanPosition = vector(0.0, 0.0, 0.0),
    vector OceanParameters = vector(1.0, 1.0, 1.0),
    
    color Color1 = color(1.0, 0.0, 0.0),
    color Color2 = color(0.0, 1.0, 0.0),
    color Color3 = color(0.0, 0.0, 1.0),
    color Color4 = color(1.0, 1.0, 0.0),
    color Color5 = color(0.0, 1.0, 1.0),
    color Color6 = color(1.0, 0.0, 1.0),
    color Color7 = color(0.5, 0.5, 0.5),
    color Color8 = color(0.7, 0.7, 0.7),
    color Color9 = color(0.8, 0.2, 0.1),
    color Color10 = color(0.1, 0.8, 0.1),
    color Color11 = color(0.1, 0.1, 0.8),
    color Color12 = color(0.9, 0.1, 0.7),
    color Color13 = color(0.7, 0.9, 0.1),
    color Color14 = color(0.2, 0.9, 0.8),
    color Color15 = color(0.9, 0.6, 0.1),
    color Color16 = color(0.1, 0.9, 0.6),
    
    color ColorInside = color(0.5, 0.5, 0.5),
    output color Result = color(0.0, 0.0, 0.0)
)
{
    // Step 1: Normalize midpoints relative to UV space
    vector normMid[16];
    normMid[0] = (MidPoint1 - OceanPosition) / OceanParameters + vector(0.5, 0.5, 0.0);
    normMid[1] = (MidPoint2 - OceanPosition) / OceanParameters + vector(0.5, 0.5, 0.0);
    normMid[2] = (MidPoint3 - OceanPosition) / OceanParameters + vector(0.5, 0.5, 0.0);
    normMid[3] = (MidPoint4 - OceanPosition) / OceanParameters + vector(0.5, 0.5, 0.0);
    normMid[4] = (MidPoint5 - OceanPosition) / OceanParameters + vector(0.5, 0.5, 0.0);
    normMid[5] = (MidPoint6 - OceanPosition) / OceanParameters + vector(0.5, 0.5, 0.0);
    normMid[6] = (MidPoint7 - OceanPosition) / OceanParameters + vector(0.5, 0.5, 0.0);
    normMid[7] = (MidPoint8 - OceanPosition) / OceanParameters + vector(0.5, 0.5, 0.0);
    normMid[8] = (MidPoint9 - OceanPosition) / OceanParameters + vector(0.5, 0.5, 0.0);
    normMid[9] = (MidPoint10 - OceanPosition) / OceanParameters + vector(0.5, 0.5, 0.0);
    normMid[10] = (MidPoint11 - OceanPosition) / OceanParameters + vector(0.5, 0.5, 0.0);
    normMid[11] = (MidPoint12 - OceanPosition) / OceanParameters + vector(0.5, 0.5, 0.0);
    normMid[12] = (MidPoint13 - OceanPosition) / OceanParameters + vector(0.5, 0.5, 0.0);
    normMid[13] = (MidPoint14 - OceanPosition) / OceanParameters + vector(0.5, 0.5, 0.0);
    normMid[14] = (MidPoint15 - OceanPosition) / OceanParameters + vector(0.5, 0.5, 0.0);
    normMid[15] = (MidPoint16 - OceanPosition) / OceanParameters + vector(0.5, 0.5, 0.0);

    // Step 2: Get the current UV coordinates (u, v)
    vector uvPos = vector(u, v, 0.0);

    // Step 3: Calculate centroid for the polygon
    vector centroid = vector(0.0, 0.0, 0.0);
    for (int i = 0; i < 16; ++i) {
        centroid += normMid[i];
    }
    centroid /= 16.0;

    // Step 4: Calculate angles for each midpoint relative to the centroid
    float angles[16];
    for (int i = 0; i < 16; ++i) {
        angles[i] = atan2(normMid[i][1] - centroid[1], normMid[i][0] - centroid[0]);
        if (angles[i] < 0.0) angles[i] += 2.0 * 3.14159;
    }

    // Step 5: Sort the angles
    for (int i = 0; i < 15; ++i) {
        for (int j = i + 1; j < 16; ++j) {
            if (angles[i] > angles[j]) {
                float temp = angles[i];
                angles[i] = angles[j];
                angles[j] = temp;
            }
        }
    }

    // Step 6: Calculate UV angle relative to the centroid
    vector delta = uvPos - centroid;
    float uvAngle = atan2(delta[1], delta[0]);
    if (uvAngle < 0.0) uvAngle += 2.0 * 3.14159;

    // Step 7: Check if the UV point is inside the polygon (using the ray-casting algorithm)
    int crossingNumber = 0;
    for (int i = 0; i < 16; ++i) {
        int next = (i + 1) % 16;
        if ((normMid[i][1] > uvPos[1]) != (normMid[next][1] > uvPos[1]) &&
            (uvPos[0] < (normMid[next][0] - normMid[i][0]) * (uvPos[1] - normMid[i][1]) / (normMid[next][1] - normMid[i][1]) + normMid[i][0])) {
            crossingNumber++;
        }
    }
    
    if (crossingNumber % 2 == 1) {
        Result = ColorInside;  // Inside the polygon
    } else {
    // Step 8: Determine the sector based on sorted angles
    color colors[16] = {Color1, Color2, Color3,Color4,Color5,Color6,Color7,Color8,Color9,Color10,Color11,Color12,Color13,Color14,Color15, Color16};
        for (int i = 0; i < 15; ++i) {
	    if (uvAngle >= angles[i] && uvAngle < angles[i + 1]) {
	        Result = colors[i];  // Assign the color corresponding to the sector
	        break;

            }
        }
        if (uvAngle >= angles[15] && uvAngle < angles[0] + 2.0 * 3.14159) {
            Result = Color16;  // Last sector
        }
    }
}
